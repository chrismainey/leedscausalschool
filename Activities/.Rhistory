packages <- c("MatchIt", "Hmisc", "ipw", "survey", "Rfast", "cobalt", "vtable", "curl")
invisible(lapply(packages, require, character.only = TRUE))
options(scipen=999)
concise_summary <- function(Form,Data) {
mod  <- lm(Form, data=Data)
res  <- data.frame(cbind(coefficients(mod),confint(mod)))[-1,]
names(res) <- c("Estimate","L 95% CI","H 95% CI")
return(round(res,3)) }
sumtable(lalonde, out="return")
packages <- c("MatchIt", "Hmisc", "ipw", "survey", "Rfast", "cobalt", "vtable", "curl")
new_packages  <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
for (itn in 1:length(packages)) suppressPackageStartupMessages(require(packages[itn],character.only = T))
packages <- c("MatchIt", "Hmisc", "ipw", "survey", "Rfast", "cobalt", "vtable", "curl")
new_packages  <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
for (itn in 1:length(packages)) suppressPackageStartupMessages(require(packages[itn],character.only = T))
invisible(lapply(packages, require, character.only = TRUE))
options(scipen=999)
concise_summary <- function(Form,Data) {
mod  <- lm(Form, data=Data)
res  <- data.frame(cbind(coefficients(mod),confint(mod)))[-1,]
names(res) <- c("Estimate","L 95% CI","H 95% CI")
return(round(res,3)) }
sumtable(lalonde, out="return")
naive <- lm(re78 ~ treat, data=lalonde)
concise_summary(naive, lalonde)
adj_conf <- lm(re78 ~ treat + age + educ + race + married + nodegree + re74 + re75, data=lalonde)
concise_summary(adj_conf, lalonde)
prop <- glm(treat ~ age + educ + race + married + nodegree + re74 + re75, data=lalonde, family="binomial")
concise_summary(prop, lalonde)
lalonde$ps <- predict(prop, type="response")
sumtable(lalonde, out="return"); hist(lalonde$ps, freq=FALSE)
adj_ps <- lm(re78 ~ treat + ps, data=lalonde)
concise_summary(adj_ps, lalonde)
adj_ps_dr <- lm(re78 ~ treat + ps + age + educ + race + married + nodegree + re74 + re75, data=lalonde)
concise_summary(adj_ps_dr, lalonde)
match <- matchit(treat ~ age + educ + race + married + nodegree + re74 + re75,
data=lalonde,
method="nearest",
ratio=1)
summary(match)
plot(match, type = "jitter")
match.data = match.data(match); sumtable(match.data, out="return")
histbackback(split(lalonde$ps, lalonde$treat), main= "Propensity score before matching", xlab=c("control", "treatment"), xlim=c(-300,100))
histbackback(split(match.data$ps, match.data$treat), main= "Propensity score after matching", xlab=c("control", "treatment"), xlim=c(-300,100))
match_naive <- lm(re78 ~ treat, data=match.data)
concise_summary(match_naive, match.data)
match_prop <- glm(treat ~ age + educ + race + married + nodegree + re74 + re75, data=match.data, family="binomial")
match.data$ps <- predict(match_prop, type="response")
match_ps <- lm(re78 ~ treat + ps, data=match.data)
concise_summary(match_ps, match.data)
match_adj <- lm(re78 ~ treat + age + educ + race + married + nodegree + re74 + re75, data=match.data)
concise_summary(match_adj, match.data)
sumtable(lalonde[which(lalonde$treat==0),], out="return", vars = "ps", title = "Propensity Score Summary Statistics of Untreated")
sumtable(lalonde[which(lalonde$treat==1),], out="return", vars = "ps", title = "Propensity Score Summary Statistics of Treated")
sumtable(lalonde[which(lalonde$treat==0),], out="return", title = "Full Summary Statistics of Untreated")
sumtable(lalonde[which(lalonde$treat==1),], out="return", title = "Full Summary Statistics of Treated")
par(mfrow=c(2,1))
hist(lalonde[which(lalonde$treat==0),]$ps, xlim = c(0,1), xlab = "Control", main = "Propensity score", col = "red", freq=FALSE)
hist(lalonde[which(lalonde$treat==1),]$ps, xlim = c(0,1), xlab = "Treatment", main = "", col = "blue", freq=FALSE)
par(mfrow=c(1,1))
weights <- ipwpoint(
exposure = treat,
family = "binomial",
link = "logit",
denominator = ~ age + educ + race + married + nodegree + re74 + re75,
data = lalonde
)
summary(weights$ipw.weights)
ipwplot(weights$ipw.weights, logscale=FALSE, xlab="Weights")
ipwplot(weights$ipw.weights, logscale=TRUE, xlab="Log Weights")
lalonde$weights <- weights$ipw.weights
sumtable(lalonde, out="return")
bal.plot(treat ~ age + educ + race + married + nodegree + re74 + re75 + ps,
data=lalonde,
var.name = "ps",
weights = lalonde$weights,
which = "both",
type = "histogram",
mirror = TRUE,
colors = c("red","blue"))
model_ipw <- svyglm(re78 ~ treat, design = svydesign(~ 1, weights = ~ weights, data = lalonde))
concise_summary(model_ipw, lalonde)
lalonde[c(which(lalonde$weights==(nth(lalonde$weights, 1, descending = T))),
which(lalonde$weights==(nth(lalonde$weights, 2, descending = T))),
which(lalonde$weights==(nth(lalonde$weights, 3, descending = T)))),]
model_ipw_dr <- svyglm(re78 ~ treat + age + educ + race + married + nodegree + re74 + re75, design = svydesign(~ 1, weights = ~ weights, data = lalonde))
concise_summary(model_ipw_dr, lalonde)
lalonde_2 <- lalonde[-124,]
sumtable(lalonde_2, out="return")
model_ipw <- svyglm(re78 ~ treat, design = svydesign(~ 1, weights = ~ weights, data = lalonde_2))
concise_summary(model_ipw, lalonde_2)
model_ipw_dr <- svyglm(re78 ~ treat + age + educ + race + married + nodegree + re74 + re75, design = svydesign(~ 1, weights = ~ weights, data = lalonde_2))
concise_summary(model_ipw_dr, lalonde_2)
packages <- c("dagitty", "ipw", "dplyr", "survey", "curl", "Rfast", "cobalt", "vtable")
new_packages  <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
invisible(lapply(packages, require, character.only = TRUE))
options(scipen=999)
concise_summary <- function(Form,Data,Family) {
mod  <- glm(Form, data=Data, family=Family)
res  <- data.frame(cbind(coefficients(mod),confint(mod)))[-1,]
names(res) <- c("Estimate","L 95% CI","H 95% CI")
return(round(res,3)) }
population <- read.csv(curl("https://raw.githubusercontent.com/georgiatomova/TuringSS21/master/3a_full_data.csv"))
st(population, out="return")
sample <- read.csv(curl("https://raw.githubusercontent.com/georgiatomova/TuringSS21/master/3a_sample.csv"))
st(sample, out="return")
naive <- glm(cancer ~ hba1c, family="binomial", data = sample)
exp(concise_summary(naive, sample, "binomial"))
adjusted <- glm(cancer ~ hba1c + BME + deprived, family="binomial", data = sample)
exp(concise_summary(adjusted, sample, "binomial"))
participation     <- glm(sample ~ BME + deprived + hba1c + cancer, family="binomial", data = population)
population$propensity    <- predict(participation, type="response")
population$IPW         <- (1/population$propensity)*(length(sample$id)/length(population$id))
sample             <- left_join(sample, population[,c("id","IPW")], by=c("id"))
hist(population$propensity, freq=FALSE, main="Propensity of Selection")
st(population, out="return", title="Population Summary Statistics")
st(sample, out="return", title="Sample Summary Statistics")
ipw <- glm(cancer ~ hba1c + BME + deprived, family="quasibinomial", data = sample, weights = IPW)
exp(concise_summary(ipw, sample, "quasibinomial"))
adjusted_full <- glm(cancer ~ hba1c + BME + deprived, family="binomial", data=population)
exp(concise_summary(adjusted_full, population, "binomial"))
latent   <- glm(cancer ~ hba1c + L_ethnicity + L_SEP, family="binomial", data=population)
exp(concise_summary(latent, population, "binomial"))
population2 <- read.csv(curl("https://raw.githubusercontent.com/georgiatomova/TuringSS21/master/3a_full_data_2.csv"))
sample2 <- read.csv(curl("https://raw.githubusercontent.com/georgiatomova/TuringSS21/master/3a_sample_2.csv"))
st(population2, out="return", title = "General population"); st(sample2, out="return", title="Study Sample")
adjusted_full <- glm(severity~occupation+age+sex, family="binomial", data = population2)
adjusted_sample <- glm(severity~occupation+age+sex, family="binomial", data = sample2)
cat("Full population"); exp(concise_summary(adjusted_full, population2, "binomial"))
cat("Sample"); exp(concise_summary(adjusted_sample, sample2, "binomial"))
adjusted_full2 <- glm(severity~symptoms+age+sex, family="binomial", data = population2)
adjusted_sample2 <- glm(severity~symptoms+age+sex, family="binomial", data = sample2)
cat("Full population"); exp(concise_summary(adjusted_full2, population2, "binomial"))
cat("Sample"); exp(concise_summary(adjusted_sample2, sample2, "binomial"))
participation2 <- glm(tested ~ occupation + symptoms + sex + age + education, family="binomial", data=population2)
population2$propensity <- predict(participation2, type="response")
population2$IPW <- (1/population2$propensity)*length(sample2$id)/length(population2$id)
sample2  <- left_join(sample2, population2[,c("id","IPW")], by=c("id"))
hist(population2$propensity, freq=FALSE, main="Propensity of Selection")
st(population2, out="return", title="Population Summary Statistics"); st(sample2, out="return", title="Sample Summary Statistics")
ipw2 <- glm(severity ~ occupation + sex + age, family="quasibinomial", data = sample2, weights = IPW)
exp(concise_summary(ipw2, sample2, "quasibinomial"))
ipw2_s <- glm(severity ~ symptoms + sex + age, family="quasibinomial", data = sample2, weights = IPW)
exp(concise_summary(ipw2_s, sample2, "quasibinomial"))
packages <- c("curl", "vtable")
new_packages  <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
for (itn in 1:length(packages)) suppressPackageStartupMessages(require(packages[itn],character.only = T))
invisible(lapply(packages, require, character.only = TRUE))
options(scipen=999)
data_3c <- read.csv(curl("https://raw.githubusercontent.com/georgiatomova/TuringSS21/master/3c_data.csv"))
concise_summary <- function(Form,Data) {
mod  <- lm(Form, data=Data)
res  <- data.frame(cbind(coefficients(mod),confint(mod)))[-1,]
names(res) <- c("Estimate","L 95% CI","H 95% CI")
return(round(res,3)) }
st(data_3c, out="return")
data_3c$income_pc <- data_3c$income/data_3c$population
data_3c$gp_pc <- data_3c$gp/data_3c$population
data_3c$dentist_pc <- data_3c$dentist/data_3c$population
data_3c$deaths_pc <- data_3c$deaths/data_3c$population
st(data_3c, out="return")
gp_effect_pc <- lm(deaths_pc ~ gp_pc + income_pc, data = data_3c)
concise_summary(gp_effect_pc, data_3c)
gp_effect <- lm(deaths ~ gp + income + population, data = data_3c)
concise_summary(gp_effect, data_3c)
cor(data_3c)
gp_effect_pc2 <- lm(deaths_pc ~ gp_pc + income_pc + population, data = data_3c)
concise_summary(gp_effect_pc2, data_3c)
gp_effect_pc3 <- lm(deaths_pc ~ gp_pc + income_pc + I(1/population), data = data_3c)
concise_summary(gp_effect_pc3, data_3c)
packages <- c("curl", "vtable")
invisible(lapply(packages, require, character.only = TRUE))
options(scipen=999)
data_3c <- read.csv(curl("https://raw.githubusercontent.com/georgiatomova/TuringSS21/master/3c_data.csv"))
concise_summary <- function(Form,Data) {
mod  <- lm(Form, data=Data)
res  <- data.frame(cbind(coefficients(mod),confint(mod)))[-1,]
names(res) <- c("Estimate","L 95% CI","H 95% CI")
return(round(res,3)) }
st(data_3c, out="return")
data_3c$income_pc <- data_3c$income/data_3c$population
data_3c$gp_pc <- data_3c$gp/data_3c$population
data_3c$dentist_pc <- data_3c$dentist/data_3c$population
data_3c$deaths_pc <- data_3c$deaths/data_3c$population
st(data_3c, out="return")
gp_effect_pc <- lm(deaths_pc ~ gp_pc + income_pc, data = data_3c)
concise_summary(gp_effect_pc, data_3c)
gp_effect <- lm(deaths ~ gp + income + population, data = data_3c)
concise_summary(gp_effect, data_3c)
cor(data_3c)
gp_effect_pc2 <- lm(deaths_pc ~ gp_pc + income_pc + population, data = data_3c)
concise_summary(gp_effect_pc2, data_3c)
gp_effect_pc3 <- lm(deaths_pc ~ gp_pc + income_pc + I(1/population), data = data_3c)
concise_summary(gp_effect_pc3, data_3c)
packages <- c("curl", "vtable")
invisible(lapply(packages, require, character.only = TRUE))
options(scipen=999)
data_3c <- read.csv(curl("https://raw.githubusercontent.com/georgiatomova/TuringSS21/master/3c_data.csv"))
concise_summary <- function(Form,Data) {
mod  <- lm(Form, data=Data)
res  <- data.frame(cbind(coefficients(mod),confint(mod)))[-1,]
names(res) <- c("Estimate","L 95% CI","H 95% CI")
return(round(res,3)) }
st(data_3c, out="return")
data_3c$income_pc <- data_3c$income/data_3c$population
data_3c$gp_pc <- data_3c$gp/data_3c$population
data_3c$dentist_pc <- data_3c$dentist/data_3c$population
data_3c$deaths_pc <- data_3c$deaths/data_3c$population
st(data_3c, out="return")
gp_effect_pc <- lm(deaths_pc ~ gp_pc + income_pc, data = data_3c)
concise_summary(gp_effect_pc, data_3c)
gp_effect <- lm(deaths ~ gp + income + population, data = data_3c)
concise_summary(gp_effect, data_3c)
cor(data_3c)
gp_effect_pc2 <- lm(deaths_pc ~ gp_pc + income_pc + population, data = data_3c)
concise_summary(gp_effect_pc2, data_3c)
gp_effect_pc3 <- lm(deaths_pc ~ gp_pc + income_pc + I(1/population), data = data_3c)
concise_summary(gp_effect_pc3, data_3c)
packages <- c("curl", "vtable")
invisible(lapply(packages, require, character.only = TRUE))
options(scipen=999)
data_3c <- read.csv(curl("https://raw.githubusercontent.com/georgiatomova/TuringSS21/master/3c_data.csv"))
concise_summary <- function(Form,Data) {
mod  <- lm(Form, data=Data)
res  <- data.frame(cbind(coefficients(mod),confint(mod)))[-1,]
names(res) <- c("Estimate","L 95% CI","H 95% CI")
return(round(res,3)) }
st(data_3c, out="return")
data_3c$income_pc <- data_3c$income/data_3c$population
data_3c$gp_pc <- data_3c$gp/data_3c$population
data_3c$dentist_pc <- data_3c$dentist/data_3c$population
data_3c$deaths_pc <- data_3c$deaths/data_3c$population
st(data_3c, out="return")
gp_effect_pc <- lm(deaths_pc ~ gp_pc + income_pc, data = data_3c)
concise_summary(gp_effect_pc, data_3c)
gp_effect <- lm(deaths ~ gp + income + population, data = data_3c)
concise_summary(gp_effect, data_3c)
cor(data_3c)
gp_effect_pc2 <- lm(deaths_pc ~ gp_pc + income_pc + population, data = data_3c)
concise_summary(gp_effect_pc2, data_3c)
gp_effect_pc3 <- lm(deaths_pc ~ gp_pc + income_pc + I(1/population), data = data_3c)
concise_summary(gp_effect_pc3, data_3c)
